{"ast":null,"code":"import { useMemo } from 'react';\nimport { useChainCalls } from './useChainCalls';\nimport { useChainId } from './useChainId';\n\nfunction warnOnInvalidContractCall(call) {\n  console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);\n}\n\nfunction encodeCallData(call, chainId) {\n  if (!call) {\n    return undefined;\n  }\n\n  if (!call.address || !call.method) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: call.address,\n      data: call.abi.encodeFunctionData(call.method, call.args),\n      chainId\n    };\n  } catch (_a) {\n    warnOnInvalidContractCall(call);\n    return undefined;\n  }\n}\n/**\n * @public\n * @deprecated Use {@link useCalls} instead.\n */\n\n\nexport function useContractCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useContractCalls([call], queryParams)[0];\n}\n/**\n * @public\n * @deprecated Use {@link useCall} instead.\n */\n\nexport function useContractCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const rawCalls = useMemo(() => calls.map(call => chainId !== undefined ? encodeCallData(call, chainId) : undefined), [JSON.stringify(calls.map(call => {\n    var _a;\n\n    return call && {\n      address: (_a = call.address) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\n      method: call.method,\n      args: call.args\n    };\n  })), chainId]);\n  const results = useChainCalls(rawCalls);\n  return useMemo(() => results.map((result, idx) => {\n    const call = calls[idx];\n\n    if (result === '0x') {\n      warnOnInvalidContractCall(call);\n      return undefined;\n    }\n\n    return call && result ? call.abi.decodeFunctionResult(call.method, result) : undefined;\n  }), [JSON.stringify(results)]);\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAT,QAAwB,OAAxB;AAKA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,SAASC,yBAAT,CAAmCC,IAAnC,EAA6D;AAC3DC,SAAO,CAACC,IAAR,CACE,kCAAkCF,IAAI,IAAIA,IAAI,CAACG,OAAO,WAAWH,IAAI,IAAIA,IAAI,CAACI,MAAM,SAASJ,IAAI,IAAIA,IAAI,CAACK,IAAI,EADhH;AAGD;;AAED,SAASC,cAAT,CAAwBN,IAAxB,EAAoDO,OAApD,EAAoE;AAClE,MAAI,CAACP,IAAL,EAAW;AACT,WAAOQ,SAAP;AACD;;AACD,MAAI,CAACR,IAAI,CAACG,OAAN,IAAiB,CAACH,IAAI,CAACI,MAA3B,EAAmC;AACjCL,6BAAyB,CAACC,IAAD,CAAzB;AACA,WAAOQ,SAAP;AACD;;AACD,MAAI;AACF,WAAO;AAAEL,aAAO,EAAEH,IAAI,CAACG,OAAhB;AAAyBM,UAAI,EAAET,IAAI,CAACU,GAAL,CAASC,kBAAT,CAA4BX,IAAI,CAACI,MAAjC,EAAyCJ,IAAI,CAACK,IAA9C,CAA/B;AAAoFE;AAApF,KAAP;AACD,GAFD,CAEE,WAAM;AACNR,6BAAyB,CAACC,IAAD,CAAzB;AACA,WAAOQ,SAAP;AACD;AACF;AAaD;;;;;;AAIA,OAAM,SAAUI,eAAV,CAA0BZ,IAA1B,EAAmF;AAAA,MAA7Ba,WAA6B,uEAAF,EAAE;AACvF,SAAOC,gBAAgB,CAAC,CAACd,IAAD,CAAD,EAASa,WAAT,CAAhB,CAAsC,CAAtC,CAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUC,gBAAV,CACJC,KADI,EAEyB;AAAA,MAA7BF,WAA6B,uEAAF,EAAE;AAE7B,QAAMN,OAAO,GAAGT,UAAU,CAAC;AAAEe;AAAF,GAAD,CAA1B;AAEA,QAAMG,QAAQ,GAAGpB,OAAO,CACtB,MAAMmB,KAAK,CAACE,GAAN,CAAWjB,IAAD,IAAWO,OAAO,KAAKC,SAAZ,GAAwBF,cAAc,CAACN,IAAD,EAAOO,OAAP,CAAtC,GAAwDC,SAA7E,CADgB,EAEtB,CACEU,IAAI,CAACC,SAAL,CACEJ,KAAK,CAACE,GAAN,CAAWjB,IAAD,IAAS;AAAA;;AAAC,eAAI,IAAI;AAAEG,aAAO,EAAE,UAAI,CAACA,OAAL,MAAY,IAAZ,IAAYiB,aAAZ,GAAY,MAAZ,GAAYA,GAAEC,WAAF,EAAvB;AAAwCjB,YAAM,EAAEJ,IAAI,CAACI,MAArD;AAA6DC,UAAI,EAAEL,IAAI,CAACK;AAAxE,KAAR;AAAsF,GAA1G,CADF,CADF,EAIEE,OAJF,CAFsB,CAAxB;AAUA,QAAMe,OAAO,GAAGzB,aAAa,CAACmB,QAAD,CAA7B;AAEA,SAAOpB,OAAO,CACZ,MACE0B,OAAO,CAACL,GAAR,CAAY,CAACM,MAAD,EAASC,GAAT,KAAgB;AAC1B,UAAMxB,IAAI,GAAGe,KAAK,CAACS,GAAD,CAAlB;;AACA,QAAID,MAAM,KAAK,IAAf,EAAqB;AACnBxB,+BAAyB,CAACC,IAAD,CAAzB;AACA,aAAOQ,SAAP;AACD;;AACD,WAAOR,IAAI,IAAIuB,MAAR,GAAkBvB,IAAI,CAACU,GAAL,CAASe,oBAAT,CAA8BzB,IAAI,CAACI,MAAnC,EAA2CmB,MAA3C,CAAlB,GAAiFf,SAAxF;AACD,GAPD,CAFU,EAUZ,CAACU,IAAI,CAACC,SAAL,CAAeG,OAAf,CAAD,CAVY,CAAd;AAYD","names":["useMemo","useChainCalls","useChainId","warnOnInvalidContractCall","call","console","warn","address","method","args","encodeCallData","chainId","undefined","data","abi","encodeFunctionData","useContractCall","queryParams","useContractCalls","calls","rawCalls","map","JSON","stringify","_a","toLowerCase","results","result","idx","decodeFunctionResult"],"sources":["../../../../src/hooks/useContractCall.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}