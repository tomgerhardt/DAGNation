{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { Web3Provider, Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents, getInjectedProvider } from '../../../helpers';\nimport { useConfig } from '../../config';\nimport { useLocalStorage } from '../../../hooks';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (err) {\n    if (err.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw err;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function NetworkProvider(_ref) {\n  let {\n    children,\n    providerOverride\n  } = _ref;\n  const {\n    autoConnect,\n    pollingInterval\n  } = useConfig();\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage('shouldConnectMetamask');\n  const [isLoading, setLoading] = useState(false);\n  const activateBrowserWallet = useCallback(async () => {\n    setLoading(true);\n    const injectedProvider = await getInjectedProvider(pollingInterval);\n\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      setLoading(false);\n      return;\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      setShouldConnectMetamask(true);\n    } catch (err) {\n      reportError(err);\n      setShouldConnectMetamask(false);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n\n    return activate(injectedProvider);\n  }, []);\n  useEffect(() => {\n    if (providerOverride) {\n      activate(providerOverride);\n    }\n  }, [providerOverride]);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    setShouldConnectMetamask(false);\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  useEffect(() => {\n    setTimeout(async () => {\n      var _a, _b, _c;\n\n      try {\n        if (shouldConnectMetamask && autoConnect && !providerOverride) {\n          await detectEthereumProvider(); // If window.ethereum._state.accounts is non null but has no items,\n          // it probably means that the user has disconnected Metamask manually.\n\n          if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {\n            return;\n          }\n\n          await activateBrowserWallet();\n        }\n      } catch (err) {\n        console.warn(err);\n      }\n    });\n  }, [shouldConnectMetamask, autoConnect, providerOverride]);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);\n\n    try {\n      setLoading(true);\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (err) {\n      reportError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError,\n      activateBrowserWallet,\n      isLoading\n    },\n    children: children\n  });\n}","map":{"version":3,"mappings":"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","names":["useCallback","useEffect","useReducer","useState","NetworkContext","defaultNetworkState","networksReducer","Web3Provider","Provider","subscribeToProviderEvents","getInjectedProvider","useConfig","useLocalStorage","detectEthereumProvider","tryToGetAccount","provider","getSigner","getAddress","err","code","undefined","NetworkProvider","children","providerOverride","autoConnect","pollingInterval","network","dispatch","onUnsubscribe","setOnUnsubscribe","shouldConnectMetamask","setShouldConnectMetamask","isLoading","setLoading","activateBrowserWallet","injectedProvider","reportError","Error","send","activate","update","newNetwork","type","error","console","deactivate","accounts","onDisconnect","setTimeout","window","ethereum","_a","_state","_b","_c","length","warn","wrappedProvider","isProvider","account","chainId","getNetwork","clearSubscriptions","_jsx","value"],"sources":["../../../../../../src/providers/network/network/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}