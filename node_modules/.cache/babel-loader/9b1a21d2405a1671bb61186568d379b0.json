{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { JsonRpcProvider, Provider } from '@ethersproject/providers';\nimport { useConfig } from '../../config';\nimport { ReadonlyNetworksContext } from './context';\nimport { fromEntries } from '../../../helpers/fromEntries';\n\nconst getProviderFromConfig = urlOrProviderOrProviderFunction => {\n  if (Provider.isProvider(urlOrProviderOrProviderFunction)) {\n    return urlOrProviderOrProviderFunction;\n  }\n\n  if (typeof urlOrProviderOrProviderFunction === 'function') {\n    return urlOrProviderOrProviderFunction();\n  }\n\n  return new JsonRpcProvider(urlOrProviderOrProviderFunction);\n};\n\nexport const getProvidersFromConfig = readOnlyUrls => fromEntries(Object.entries(readOnlyUrls).map(_ref => {\n  let [chainId, urlOrProviderOrProviderFunction] = _ref;\n  return [chainId, getProviderFromConfig(urlOrProviderOrProviderFunction)];\n}));\nexport function ReadonlyNetworksProvider(_ref2) {\n  let {\n    providerOverrides = {},\n    children\n  } = _ref2;\n  const {\n    readOnlyUrls = {}\n  } = useConfig();\n  const [providers, setProviders] = useState(() => Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  useEffect(() => {\n    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));\n  }, Object.entries(readOnlyUrls).flat());\n  return _jsx(ReadonlyNetworksContext.Provider, Object.assign({\n    value: providers\n  }, {\n    children: children\n  }));\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAAwD,0BAAxD;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,uBAAT,QAAwC,WAAxC;AAEA,SAASC,WAAT,QAA4B,8BAA5B;;AAOA,MAAMC,qBAAqB,GAAIC,+BAAD,IAAiF;AAC7G,MAAIL,QAAQ,CAACM,UAAT,CAAoBD,+BAApB,CAAJ,EAA0D;AACxD,WAAOA,+BAAP;AACD;;AACD,MAAI,OAAOA,+BAAP,KAA2C,UAA/C,EAA2D;AACzD,WAAOA,+BAA+B,EAAtC;AACD;;AACD,SAAO,IAAIN,eAAJ,CAAoBM,+BAApB,CAAP;AACD,CARD;;AAUA,OAAO,MAAME,sBAAsB,GAAIC,YAAD,IACpCL,WAAW,CACTM,MAAM,CAACC,OAAP,CAAeF,YAAf,EAA6BG,GAA7B,CAAiC;AAAA,MAAC,CAACC,OAAD,EAAUP,+BAAV,CAAD;AAAA,SAAgD,CAC/EO,OAD+E,EAE/ER,qBAAqB,CAACC,+BAAD,CAF0D,CAAhD;AAAA,CAAjC,CADS,CADN;AAQP,OAAM,SAAUQ,wBAAV,QAA6F;AAAA,MAA1D;AAAEC,qBAAiB,GAAG,EAAtB;AAA0BC;AAA1B,GAA0D;AACjG,QAAM;AAAEP,gBAAY,GAAG;AAAjB,MAAwBP,SAAS,EAAvC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAY,MAAMW,gCACvDF,sBAAsB,CAACC,YAAD,CADiC,GAEvDM,iBAFuD,CAAlB,CAA1C;AAKAjB,WAAS,CAAC,MAAK;AACboB,gBAAY,iCAAMV,sBAAsB,CAACC,YAAD,CAA5B,GAA+CM,iBAA/C,EAAZ;AACD,GAFQ,EAENL,MAAM,CAACC,OAAP,CAAeF,YAAf,EAA6BU,IAA7B,EAFM,CAAT;AAIA,SAAOC,KAACjB,uBAAuB,CAACF,QAAzB,EAAiCS;AAACW,SAAK,EAAEJ;AAAR,KAAiB;AAAAD,cAAGA;AAAH,GAAjB,CAAjC,CAAP;AACD","names":["useEffect","useState","JsonRpcProvider","Provider","useConfig","ReadonlyNetworksContext","fromEntries","getProviderFromConfig","urlOrProviderOrProviderFunction","isProvider","getProvidersFromConfig","readOnlyUrls","Object","entries","map","chainId","ReadonlyNetworksProvider","providerOverrides","children","providers","setProviders","flat","_jsx","value"],"sources":["../../../../../../src/providers/network/readonlyNetworks/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}