{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { multicall as multicall1, multicall2, useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { useBlockNumbers } from '../../blockNumber/blockNumbers';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer } from '../common';\nimport { getUniqueCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\n\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(chainId => [Number(chainId), {\n    value: state[Number(chainId)],\n    multicallAddress: multicallAddresses[Number(chainId)]\n  }]));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function MultiChainStateProvider(_ref) {\n  let {\n    children,\n    multicallAddresses\n  } = _ref;\n  const {\n    multicallVersion\n  } = useConfig();\n  const networks = useReadonlyNetworks();\n  const blockNumbers = useBlockNumbers();\n  const {\n    reportError\n  } = useNetwork();\n  const [calls, dispatchCalls] = useReducer(callsReducer, []);\n  const [state, dispatchState] = useReducer(chainStateReducer, {});\n  const multicall = multicallVersion === 1 ? multicall1 : multicall2;\n  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);\n  const uniqueCalls = useMemo(() => getUniqueCalls(debouncedCalls), [debouncedCalls]); // used for deep equality in hook dependencies\n\n  const uniqueCallsJSON = JSON.stringify(debouncedCalls);\n  const chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n\n  function multicallForChain(chainId, provider) {\n    const blockNumber = blockNumbers[chainId];\n    const multicallAddress = multicallAddresses[chainId];\n\n    if (!provider || !blockNumber) {\n      return;\n    }\n\n    if (!multicallAddress) {\n      reportError(new Error(`Missing multicall address for chain id ${chainId}`));\n      return;\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n\n    const callsOnThisChain = uniqueCalls.filter(call => call.chainId === chainId);\n\n    if (callsOnThisChain.length === 0) {\n      return;\n    }\n\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n  }\n\n  useEffect(() => {\n    for (const [_chainId, provider] of Object.entries(networks)) {\n      multicallForChain(Number(_chainId), provider);\n    }\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON]);\n  const chains = useMemo(() => composeChainState(networks, state, multicallAddresses), [state, multicallAddresses, networks]);\n  const provided = {\n    chains,\n    dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,OAA/B,EAAwCC,UAAxC,QAA0D,OAA1D;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,uBAAT,QAAwC,WAAxC;AACA,SAAkBC,SAAS,IAAIC,UAA/B,EAA2CC,UAA3C,EAA8DC,SAA9D,EAAyEC,UAAzE,QAA2F,UAA3F;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAGA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,WAAhD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,UAAT,QAA2B,2BAA3B;;AASA,SAASC,iBAAT,CAA2BC,QAA3B,EAAgDC,KAAhD,EAA8DC,kBAA9D,EAA6G;AAC3G,SAAOV,WAAW,CAChBW,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,GAAtB,CAA2BC,OAAD,IAAa,CACrCC,MAAM,CAACD,OAAD,CAD+B,EAErC;AACEE,SAAK,EAAEP,KAAK,CAACM,MAAM,CAACD,OAAD,CAAP,CADd;AAEEG,oBAAgB,EAAEP,kBAAkB,CAACK,MAAM,CAACD,OAAD,CAAP;AAFtC,GAFqC,CAAvC,CADgB,CAAlB;AASD;AAED;;;;;AAGA,OAAM,SAAUI,uBAAV,OAAyE;AAAA,MAAvC;AAAEC,YAAF;AAAYT;AAAZ,GAAuC;AAC7E,QAAM;AAAEU;AAAF,MAAuBxB,SAAS,EAAtC;AACA,QAAMY,QAAQ,GAAGV,mBAAmB,EAApC;AACA,QAAMuB,YAAY,GAAGtB,eAAe,EAApC;AACA,QAAM;AAAEuB;AAAF,MAAkBzB,UAAU,EAAlC;AAEA,QAAM,CAAC0B,KAAD,EAAQC,aAAR,IAAyBlC,UAAU,CAACY,YAAD,EAAe,EAAf,CAAzC;AACA,QAAM,CAACO,KAAD,EAAQgB,aAAR,IAAyBnC,UAAU,CAACa,iBAAD,EAAoB,EAApB,CAAzC;AAEA,QAAMV,SAAS,GAAG2B,gBAAgB,KAAK,CAArB,GAAyB1B,UAAzB,GAAsCC,UAAxD;AAEA,QAAM,CAAC+B,cAAD,EAAiBC,iBAAjB,IAAsCpC,eAAe,CAACgC,KAAD,EAAQf,QAAR,EAAkB,EAAlB,CAA3D;AACA,QAAMoB,WAAW,GAAGvC,OAAO,CAAC,MAAMe,cAAc,CAACsB,cAAD,CAArB,EAAuC,CAACA,cAAD,CAAvC,CAA3B,CAZ6E,CAc7E;;AACA,QAAMG,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeL,cAAf,CAAxB;AAEA,QAAMZ,OAAO,GAAGR,UAAU,EAA1B;AACAD,sBAAoB,CAClBwB,eADkB,EAElBD,WAFkB,EAGlBd,OAAO,KAAKkB,SAAZ,GAAwBX,YAAY,CAACP,OAAD,CAApC,GAA2DkB,SAHzC,EAIlBtB,kBAJkB,CAApB;;AAOA,WAASuB,iBAAT,CAA2BnB,OAA3B,EAA6CoB,QAA7C,EAAoE;AAClE,UAAMC,WAAW,GAAGd,YAAY,CAACP,OAAD,CAAhC;AACA,UAAMG,gBAAgB,GAAGP,kBAAkB,CAACI,OAAD,CAA3C;;AAEA,QAAI,CAACoB,QAAD,IAAa,CAACC,WAAlB,EAA+B;AAC7B;AACD;;AACD,QAAI,CAAClB,gBAAL,EAAuB;AACrBK,iBAAW,CAAC,IAAIc,KAAJ,CAAU,0CAA0CtB,OAAO,EAA3D,CAAD,CAAX;AACA;AACD;;AACD,QAAIa,iBAAiB,KAAKnB,QAA1B,EAAoC;AAClC;AACA;AACD;;AAED,UAAM6B,gBAAgB,GAAGT,WAAW,CAACU,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACzB,OAAL,KAAiBA,OAA9C,CAAzB;;AACA,QAAIuB,gBAAgB,CAACG,MAAjB,KAA4B,CAAhC,EAAmC;AACjC;AACD;;AACDvC,oBAAgB,CACdiC,QADc,EAEdzC,SAFc,EAGdwB,gBAHc,EAIdkB,WAJc,EAKdE,gBALc,EAMdZ,aANc,EAOdX,OAPc,EAQdQ,WARc,CAAhB;AAUD;;AAEDlC,WAAS,CAAC,MAAK;AACb,SAAK,MAAM,CAACqD,QAAD,EAAWP,QAAX,CAAX,IAAmCvB,MAAM,CAAC+B,OAAP,CAAelC,QAAf,CAAnC,EAA6D;AAC3DyB,uBAAiB,CAAClB,MAAM,CAAC0B,QAAD,CAAP,EAAmBP,QAAnB,CAAjB;AACD;AACF,GAJQ,EAIN,CAACb,YAAD,EAAeb,QAAf,EAAyBE,kBAAzB,EAA6CmB,eAA7C,CAJM,CAAT;AAMA,QAAMc,MAAM,GAAGtD,OAAO,CAAC,MAAMkB,iBAAiB,CAACC,QAAD,EAAWC,KAAX,EAAkBC,kBAAlB,CAAxB,EAA+D,CACnFD,KADmF,EAEnFC,kBAFmF,EAGnFF,QAHmF,CAA/D,CAAtB;AAMA,QAAMoC,QAAQ,GAAG;AAAED,UAAF;AAAUnB;AAAV,GAAjB;AAEA,SAAOqB,KAACrD,uBAAuB,CAACsD,QAAzB,EAAiC;AAAC9B,SAAK,EAAE4B,QAAR;AAAkBzB,YAAQ,EAAEA;AAA5B,GAAjC,CAAP;AACD","names":["useEffect","useMemo","useReducer","useDebouncePair","MultiChainStatesContext","multicall","multicall1","multicall2","useConfig","useNetwork","useReadonlyNetworks","useBlockNumbers","fromEntries","performMulticall","callsReducer","chainStateReducer","getUniqueCalls","useDevtoolsReporting","useChainId","composeChainState","networks","state","multicallAddresses","Object","keys","map","chainId","Number","value","multicallAddress","MultiChainStateProvider","children","multicallVersion","blockNumbers","reportError","calls","dispatchCalls","dispatchState","debouncedCalls","debouncedNetworks","uniqueCalls","uniqueCallsJSON","JSON","stringify","undefined","multicallForChain","provider","blockNumber","Error","callsOnThisChain","filter","call","length","_chainId","entries","chains","provided","_jsx","Provider"],"sources":["../../../../../../src/providers/chainState/multiChainStates/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}