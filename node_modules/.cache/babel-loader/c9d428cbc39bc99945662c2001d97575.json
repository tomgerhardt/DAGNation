{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\n/**\n * Provides basic services for a DApp.\n * @public\n */\n\nexport function DAppProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\n\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\n\nconst getMulticall2Addresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    multicallAddresses,\n    networks,\n    multicallVersion\n  } = useConfig();\n  const defaultAddresses = useMemo(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);\n  const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(ReadonlyNetworksProvider, {\n    children: _jsx(NetworkProvider, {\n      children: _jsx(BlockNumberProvider, {\n        children: _jsx(BlockNumbersProvider, {\n          children: _jsx(LocalMulticallProvider, {\n            children: _jsx(MultiChainStateProvider, Object.assign({\n              multicallAddresses: multicallAddressesMerged\n            }, {\n              children: _jsx(NotificationsProvider, {\n                children: _jsx(TransactionProvider, {\n                  children: children\n                })\n              })\n            }))\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,OAApB,QAAmC,OAAnC;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,WAA1D;AACA,SAASC,oBAAT,QAAqC,4BAArC;AAUA;;;;;AAIA,OAAM,SAAUC,YAAV,OAA8D;AAAA,MAAvC;AAAEC,UAAF;AAAUC;AAAV,GAAuC;AAClE,SACEC,KAACb,cAAD,EAAec;AAACH,UAAM,EAAEA;AAAT,KAAe;AAAAC,cAC5BC,KAACE,sBAAD,EAAuB;AAAAH,gBAAEA;AAAF,KAAvB;AAD4B,GAAf,CAAf,CADF;AAKD;;AAMD,MAAMI,qBAAqB,GAAIC,QAAD,IAAkC;AAC9D,QAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAmBC,OAAD,IAAcF,MAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACE,gBAAlE;AACA,SAAOJ,MAAP;AACD,CAJD;;AAMA,MAAMK,sBAAsB,GAAIN,QAAD,IAAkC;AAC/D,QAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAmBC,OAAD,IAAY;AAC5B,QAAIA,OAAO,CAACI,iBAAZ,EAA+B;AAC7BN,YAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACI,iBAAlC;AACD;AACF,GAJD;AAKA,SAAON,MAAP;AACD,CARD;;AAUA,SAASH,sBAAT,QAA6D;AAAA,MAA7B;AAAEH;AAAF,GAA6B;AAC3D,QAAM;AAAEa,sBAAF;AAAsBR,YAAtB;AAAgCS;AAAhC,MAAqDvB,SAAS,EAApE;AACA,QAAMwB,gBAAgB,GAAG5B,OAAO,CAC9B,MAAO2B,gBAAgB,KAAK,CAArB,GAAyBV,qBAAqB,CAACC,QAAD,CAA9C,GAA2DM,sBAAsB,CAACN,QAAD,CAD1D,EAE9B,CAACA,QAAD,EAAWS,gBAAX,CAF8B,CAAhC;AAIA,QAAME,wBAAwB,mCAAQD,gBAAR,GAA6BF,kBAA7B,CAA9B;AAEA,SACEZ,KAACL,wBAAD,EAAyB;AAAAI,cACvBC,KAACN,eAAD,EAAgB;AAAAK,gBACdC,KAACZ,mBAAD,EAAoB;AAAAW,kBAClBC,KAACJ,oBAAD,EAAqB;AAAAG,oBACnBC,KAACP,sBAAD,EAAuB;AAAAM,sBACrBC,KAACX,uBAAD,EAAwBY;AAACW,gCAAkB,EAAEG;AAArB,eAA6C;AAAAhB,wBACnEC,KAACT,qBAAD,EAAsB;AAAAQ,0BACpBC,KAACR,mBAAD,EAAoB;AAAAO,4BAAEA;AAAF,iBAApB;AADoB,eAAtB;AADmE,aAA7C,CAAxB;AADqB,WAAvB;AADmB,SAArB;AADkB,OAApB;AADc,KAAhB;AADuB,GAAzB,CADF;AAiBD","names":["useMemo","ConfigProvider","BlockNumberProvider","MultiChainStateProvider","useConfig","NotificationsProvider","TransactionProvider","LocalMulticallProvider","NetworkProvider","ReadonlyNetworksProvider","BlockNumbersProvider","DAppProvider","config","children","_jsx","Object","DAppProviderWithConfig","getMulticallAddresses","networks","result","forEach","network","chainId","multicallAddress","getMulticall2Addresses","multicall2Address","multicallAddresses","multicallVersion","defaultAddresses","multicallAddressesMerged"],"sources":["../../../../src/providers/DAppProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}