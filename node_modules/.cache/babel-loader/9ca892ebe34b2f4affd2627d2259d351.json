{"ast":null,"code":"/**\n * @internal Intended for internal use - use it on your own risk\n */\nexport function callsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'ADD_CALLS') {\n    return [...state, ...action.calls.map(call => Object.assign(Object.assign({}, call), {\n      address: call.address.toLowerCase()\n    }))];\n  } else {\n    let finalState = state;\n\n    for (const call of action.calls) {\n      const index = finalState.findIndex(x => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);\n\n      if (index !== -1) {\n        finalState = finalState.filter((_, i) => i !== index);\n      }\n    }\n\n    return finalState;\n  }\n}","map":{"version":3,"mappings":"AAoCA;;;AAGA,OAAM,SAAUA,YAAV,GAA4D;AAAA,MAArCC,KAAqC,uEAAlB,EAAkB;AAAA,MAAdC,MAAc;;AAChE,MAAIA,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO,CAAC,GAAGF,KAAJ,EAAW,GAAGC,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAkBC,IAAD,IAAUC,gCAAMD,IAAN,GAAU;AAAEE,aAAO,EAAEF,IAAI,CAACE,OAAL,CAAaC,WAAb;AAAX,KAAV,CAA3B,CAAd,CAAP;AACD,GAFD,MAEO;AACL,QAAIC,UAAU,GAAGT,KAAjB;;AACA,SAAK,MAAMK,IAAX,IAAmBJ,MAAM,CAACE,KAA1B,EAAiC;AAC/B,YAAMO,KAAK,GAAGD,UAAU,CAACE,SAAX,CACXC,CAAD,IAAOA,CAAC,CAACL,OAAF,CAAUC,WAAV,OAA4BH,IAAI,CAACE,OAAL,CAAaC,WAAb,EAA5B,IAA0DI,CAAC,CAACC,IAAF,KAAWR,IAAI,CAACQ,IADrE,CAAd;;AAGA,UAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,kBAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKN,KAAlC,CAAb;AACD;AACF;;AACD,WAAOD,UAAP;AACD;AACF","names":["callsReducer","state","action","type","calls","map","call","Object","address","toLowerCase","finalState","index","findIndex","x","data","filter","_","i"],"sources":["../../../../../../src/providers/chainState/common/callsReducer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}