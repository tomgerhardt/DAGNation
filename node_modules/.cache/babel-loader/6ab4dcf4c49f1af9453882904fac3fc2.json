{"ast":null,"code":"import _slicedToArray from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useMemo, useReducer } from 'react';\nimport { useDebouncePair } from '../../../hooks';\nimport { MultiChainStatesContext } from './context';\nimport { multicall as multicall1, multicall2, useConfig, useNetwork } from '../../..';\nimport { useReadonlyNetworks } from '../../network';\nimport { useBlockNumbers } from '../../blockNumber/blockNumbers';\nimport { fromEntries } from '../../../helpers/fromEntries';\nimport { performMulticall } from '../common/performMulticall';\nimport { callsReducer, chainStateReducer } from '../common';\nimport { getUniqueCalls } from '../../../helpers';\nimport { useDevtoolsReporting } from '../common/useDevtoolsReporting';\nimport { useChainId } from '../../../hooks/useChainId';\n\nfunction composeChainState(networks, state, multicallAddresses) {\n  return fromEntries(Object.keys(networks).map(function (chainId) {\n    return [Number(chainId), {\n      value: state[Number(chainId)],\n      multicallAddress: multicallAddresses[Number(chainId)]\n    }];\n  }));\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\n\nexport function MultiChainStateProvider(_ref) {\n  var children = _ref.children,\n      multicallAddresses = _ref.multicallAddresses;\n\n  var _useConfig = useConfig(),\n      multicallVersion = _useConfig.multicallVersion;\n\n  var networks = useReadonlyNetworks();\n  var blockNumbers = useBlockNumbers();\n\n  var _useNetwork = useNetwork(),\n      reportError = _useNetwork.reportError;\n\n  var _useReducer = useReducer(callsReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      calls = _useReducer2[0],\n      dispatchCalls = _useReducer2[1];\n\n  var _useReducer3 = useReducer(chainStateReducer, {}),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      state = _useReducer4[0],\n      dispatchState = _useReducer4[1];\n\n  var multicall = multicallVersion === 1 ? multicall1 : multicall2;\n\n  var _useDebouncePair = useDebouncePair(calls, networks, 50),\n      _useDebouncePair2 = _slicedToArray(_useDebouncePair, 2),\n      debouncedCalls = _useDebouncePair2[0],\n      debouncedNetworks = _useDebouncePair2[1];\n\n  var uniqueCalls = useMemo(function () {\n    return getUniqueCalls(debouncedCalls);\n  }, [debouncedCalls]); // used for deep equality in hook dependencies\n\n  var uniqueCallsJSON = JSON.stringify(debouncedCalls);\n  var chainId = useChainId();\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== undefined ? blockNumbers[chainId] : undefined, multicallAddresses);\n\n  function multicallForChain(chainId, provider) {\n    var blockNumber = blockNumbers[chainId];\n    var multicallAddress = multicallAddresses[chainId];\n\n    if (!provider || !blockNumber) {\n      return;\n    }\n\n    if (!multicallAddress) {\n      reportError(new Error(\"Missing multicall address for chain id \".concat(chainId)));\n      return;\n    }\n\n    if (debouncedNetworks !== networks) {\n      // Wait for debounce to catch up.\n      return;\n    }\n\n    var callsOnThisChain = uniqueCalls.filter(function (call) {\n      return call.chainId === chainId;\n    });\n\n    if (callsOnThisChain.length === 0) {\n      return;\n    }\n\n    performMulticall(provider, multicall, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId, reportError);\n  }\n\n  useEffect(function () {\n    for (var _i = 0, _Object$entries = Object.entries(networks); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          _chainId = _Object$entries$_i[0],\n          provider = _Object$entries$_i[1];\n\n      multicallForChain(Number(_chainId), provider);\n    }\n  }, [blockNumbers, networks, multicallAddresses, uniqueCallsJSON]);\n  var chains = useMemo(function () {\n    return composeChainState(networks, state, multicallAddresses);\n  }, [state, multicallAddresses, networks]);\n  var provided = {\n    chains: chains,\n    dispatchCalls: dispatchCalls\n  };\n  return _jsx(MultiChainStatesContext.Provider, {\n    value: provided,\n    children: children\n  });\n}","map":{"version":3,"mappings":"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","names":["useEffect","useMemo","useReducer","useDebouncePair","MultiChainStatesContext","multicall","multicall1","multicall2","useConfig","useNetwork","useReadonlyNetworks","useBlockNumbers","fromEntries","performMulticall","callsReducer","chainStateReducer","getUniqueCalls","useDevtoolsReporting","useChainId","composeChainState","networks","state","multicallAddresses","Object","keys","map","chainId","Number","value","multicallAddress","MultiChainStateProvider","children","multicallVersion","blockNumbers","reportError","calls","dispatchCalls","dispatchState","debouncedCalls","debouncedNetworks","uniqueCalls","uniqueCallsJSON","JSON","stringify","undefined","multicallForChain","provider","blockNumber","Error","callsOnThisChain","filter","call","length","entries","_chainId","chains","provided","_jsx","Provider"],"sources":["../../../../../../src/providers/chainState/multiChainStates/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}