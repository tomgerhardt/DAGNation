{"ast":null,"code":"var _jsxFileName = \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/src/components-custom/CallToActionCustom2.js\",\n    _s4 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\nimport clsx from 'clsx';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport { useEthers, AvalancheTestnet, useCall, useContractFunction } from \"@usedapp/core\";\nimport { utils } from 'ethers';\nimport DAGNationABI from \"../DAGNationABI.json\";\nimport { Contract } from '@ethersproject/contracts';\nimport { useState } from \"react\"; //setup smart contract interface\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DAGNationAddress = '0x3efbCBfCE9E96b83C1c7f496e55D3792db5B0123';\nconst DAGNInterface = new utils.Interface(DAGNationABI);\nconst contract = new Contract(DAGNationAddress, DAGNInterface);\nconst useStyles = makeStyles(theme => ({\n  heroTitle: {\n    textTransform: 'uppercase'\n  },\n  panel: {\n    backgroundColor: 'rgb(0,0,0,70%)',\n    borderRadius: '16px'\n  },\n  nodeMeterTitleCont: {\n    display: 'inline'\n  },\n  nodeMeterCont: {\n    display: 'block',\n    position: 'relative',\n    height: '100px'\n  },\n  nodeMeterBK: {\n    position: 'absolute',\n    width: '100%',\n    height: '60px',\n    backgroundColor: '#111',\n    border: '2px solid',\n    borderRight: '0',\n    borderColor: 'white',\n    borderRadius: '8px',\n    borderBottomRightRadius: '0',\n    borderTopRightRadius: '0'\n  },\n  nodeMeterProg: {\n    position: 'absolute',\n    backgroundColor: '#1bb3be',\n    height: '56px',\n    top: '2px',\n    left: '2px',\n    borderRadius: '6px',\n    borderBottomRightRadius: '0',\n    borderTopRightRadius: '0'\n  },\n  nodeMeterTickCont: {\n    position: 'absolute',\n    left: '50%',\n    top: '70px'\n  },\n  nodeMeterTick: {\n    position: 'absolute',\n    width: '2px',\n    height: '20px',\n    backgroundColor: 'white',\n    top: '-20px',\n    left: '0px'\n  },\n  doublePanelCont: {\n    height: '340px',\n    paddingTop: '20px'\n  },\n  doublePanel: {\n    width: '50%',\n    display: 'inline-block',\n    height: '100%'\n  },\n  panelDetail: {\n    backgroundColor: 'rgb(0,0,0,70%)',\n    borderRadius: '16px',\n    height: '100%',\n    width: '100%',\n    display: 'inline-block'\n  },\n  lineBreak: {\n    height: '2px',\n    width: '100%',\n    backgroundColor: 'white'\n  },\n  claimButton: {\n    display: 'block'\n  },\n  panelCont: {\n    height: '300px',\n    marginTop: '40px'\n  },\n  panel: {\n    backgroundColor: 'rgb(0,0,0,70%)',\n    borderRadius: '16px',\n    height: '100%'\n  },\n  lineBreak: {\n    height: '2px',\n    width: '100%',\n    backgroundColor: 'white'\n  }\n}));\n\nconst RewardsComponent = () => {\n  _s4();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$();\n\n  const classes = useStyles();\n  const {\n    account\n  } = useEthers();\n  const isConnected = account !== undefined; //send claim write to contract\n\n  const {\n    state,\n    send\n  } = useContractFunction(contract, 'claimBusd', {\n    transactionName: 'Claim'\n  });\n  const {\n    status\n  } = state;\n\n  const writeClaimBUSD = () => {\n    send();\n  }; //grab wallet rewards amount\n\n\n  function getRewardsAmount() {\n    _s();\n\n    var _useCall;\n\n    const {\n      value,\n      error\n    } = (_useCall = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getHolderBusdAmount',\n      // Method to be called\n      args: [account] // Method arguments - address to be checked\n\n    })) !== null && _useCall !== void 0 ? _useCall : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    }\n\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s(getRewardsAmount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const rewardsAmount = Math.trunc(getRewardsAmount() / 1000000000000000000); //grab wallet staked amount\n\n  function getStakedAmount() {\n    _s2();\n\n    var _useCall2;\n\n    const {\n      value,\n      error\n    } = (_useCall2 = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getHolderAmountInPool',\n      // Method to be called\n      args: [account] // Method arguments - address to be checked\n\n    })) !== null && _useCall2 !== void 0 ? _useCall2 : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    }\n\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s2(getStakedAmount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const stakedAmount = getStakedAmount();\n  const stakedPercentage = 0; //grab wallet waiting amount\n\n  function getWaitingAmount() {\n    _s3();\n\n    var _useCall3;\n\n    const {\n      value,\n      error\n    } = (_useCall3 = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getHolderWaitingAmount',\n      // Method to be called\n      args: [account] // Method arguments - address to be checked\n\n    })) !== null && _useCall3 !== void 0 ? _useCall3 : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    }\n\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s3(getWaitingAmount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const waitingAmount = getWaitingAmount();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    mt: 4,\n    className: classes.doublePanelCont,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.doublePanel,\n      style: {\n        paddingRight: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.panelDetail,\n        p: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"h3\",\n          component: \"h2\",\n          children: \"My $DAG\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.lineBreak\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              display: 'inline-block',\n              marginRight: \"5px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.nodeMeterTitleCont,\n              variant: \"h3\",\n              component: \"h2\",\n              children: waitingAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 78\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              display: 'inline-block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.nodeMeterTitleCont,\n                variant: \"body\",\n                color: \"primary\",\n                children: \"DAG Queued\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.nodeMeterTitleCont,\n                variant: \"body\",\n                color: \"primary\",\n                children: \"for next epoch\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              display: 'inline-block',\n              marginRight: \"5px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.nodeMeterTitleCont,\n              variant: \"h3\",\n              component: \"h2\",\n              children: stakedAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 78\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              display: 'inline-block'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.nodeMeterTitleCont,\n                variant: \"body\",\n                color: \"primary\",\n                children: \"DAG Staked\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.nodeMeterTitleCont,\n                variant: \"body\",\n                color: \"primary\",\n                children: \"on node\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 30\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.doublePanel,\n      style: {\n        paddingLeft: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.panelDetail,\n        p: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"h3\",\n          component: \"h2\",\n          children: \"My Rewards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.lineBreak\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.nodeMeterTitleCont,\n            variant: \"h3\",\n            component: \"h2\",\n            children: rewardsAmount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.nodeMeterTitleCont,\n            variant: \"body\",\n            color: \"primary\",\n            children: \"$BUSD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              display: 'inline-block'\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: classes.claimButton,\n              variant: \"contained\",\n              size: \"large\",\n              onClick: () => writeClaimBUSD(),\n              children: \"Claim\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 63\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 9\n  }, this);\n};\n\n_s4(RewardsComponent, \"6YN9pK+MogxuQociplsmgla97bQ=\", false, function () {\n  return [useStyles, useEthers, useContractFunction];\n});\n\n_c = RewardsComponent;\n\nconst AdminComponent = () => {\n  _s6();\n\n  var _s5 = $RefreshSig$();\n\n  const classes = useStyles();\n  const {\n    account\n  } = useEthers();\n  const isConnected = account !== undefined; //see if wallet is admin\n\n  function getAdminStatus() {\n    _s5();\n\n    var _useCall4;\n\n    const {\n      value,\n      error\n    } = (_useCall4 = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'checkAdmin',\n      // Method to be called\n      args: [account] // Method arguments - address to be checked\n\n    })) !== null && _useCall4 !== void 0 ? _useCall4 : {};\n\n    if (error) {\n      console.error(error.message);\n      return false;\n    }\n\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s5(getAdminStatus, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const isAdmin = getAdminStatus();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isAdmin ? /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      mt: 4,\n      className: classes.panelCont,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.panel,\n        p: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"h3\",\n          component: \"h2\",\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.lineBreak\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 13\n  }, this);\n};\n\n_s6(AdminComponent, \"Qy5kvnUwcYsD2gGWcXEUW22QUjU=\", false, function () {\n  return [useStyles, useEthers];\n});\n\n_c2 = AdminComponent;\nexport default function Component(props) {\n  _s8();\n\n  var _s7 = $RefreshSig$();\n\n  const classes = useStyles();\n  const meterWidth = Object.assign({\n    wid: '0%'\n  });\n  const {\n    account\n  } = useEthers();\n  const isConnected = account !== undefined; //send invest write to contract\n\n  const {\n    state,\n    send\n  } = useContractFunction(contract, 'invest', {\n    transactionName: 'Invest'\n  });\n  const {\n    status\n  } = state;\n  const [investBNBamount, setInvestBNBamount] = useState('');\n\n  const writeInvestBNB = () => {\n    send({\n      value: utils.parseEther(investBNBamount)\n    });\n  }; //functions to grab data from contract and update interface\n\n\n  function getDAGamount() {\n    _s7();\n\n    var _useCall5;\n\n    const {\n      value,\n      error\n    } = (_useCall5 = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getTotalDag',\n      // Method to be called\n      args: [] // Method arguments - address to be checked for power\n\n    })) !== null && _useCall5 !== void 0 ? _useCall5 : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    } //update dag meter\n\n\n    const meterPerc = value / 250000;\n    Object.assign(meterWidth, {\n      wid: meterPerc * 50 + '%'\n    });\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s7(getDAGamount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const stakedDAGamount = getDAGamount();\n  const meterBar = /*#__PURE__*/React.createRef();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        px: 6,\n        pt: 8,\n        pb: 6,\n        textAlign: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.heroTitle,\n          variant: \"h3\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Accessible softnode ownership\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body\",\n          color: \"primary\",\n          children: \"DAGNation provides the opportunity to benefit from the rewrds of node ownership on the Constellation Network. Nodes require 250k $DAG to be staked in them to earn rewards. With DAGNation, you can stake as little at .25 $BNB to participate.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      mt: 4,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.panel,\n        p: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"h3\",\n          component: \"h2\",\n          children: stakedDAGamount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"body\",\n          color: \"primary\",\n          children: \"$DAG Staked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n          component: \"div\",\n          className: classes.nodeMeterCont,\n          children: [/*#__PURE__*/_jsxDEV(\"box\", {\n            className: classes.nodeMeterBK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n            className: classes.nodeMeterProg,\n            style: {\n              width: meterWidth.wid\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n            component: \"div\",\n            className: classes.nodeMeterTickCont,\n            children: [/*#__PURE__*/_jsxDEV(\"box\", {\n              component: \"div\",\n              className: classes.nodeMeterTick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"typography\", {\n              children: \"250k $DAG\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"typography\", {\n              children: \"(node minimum)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            component: \"h2\",\n            children: \"Buy $DAG and Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          my: 2,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            style: {\n              marginRight: \"20px\",\n              top: \"2px\"\n            },\n            size: \"small\",\n            id: \"outlined-basic\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: \"$BNB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 27\n              }, this)\n            },\n            placeholder: \".25 Min\",\n            variant: \"outlined\",\n            onChange: event => setInvestBNBamount(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            size: \"large\",\n            onClick: () => writeInvestBNB(),\n            children: \"Buy and Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          display: \"block\",\n          variant: \"body\",\n          color: \"primary\",\n          children: \"Your $BNB is swapped for $DAG and put into a queue to wait until the next Softnode epoch starts, where it will be staked in a Constellation Network Softnode. If at least 250,000 $DAG is staked before the epoch starts, produced rewards will be split among stakers per their percentage of the node.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(RewardsComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(AdminComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 1\n  }, this);\n}\n\n_s8(Component, \"OTj2NBgPeaHaGW/Aykf1hhum18s=\", false, function () {\n  return [useStyles, useEthers, useContractFunction];\n});\n\n_c3 = Component;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RewardsComponent\");\n$RefreshReg$(_c2, \"AdminComponent\");\n$RefreshReg$(_c3, \"Component\");","map":{"version":3,"sources":["/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/src/components-custom/CallToActionCustom2.js"],"names":["React","makeStyles","emphasize","fade","darken","lighten","clsx","Container","Box","Typography","TextField","InputAdornment","Button","useEthers","AvalancheTestnet","useCall","useContractFunction","utils","DAGNationABI","Contract","useState","DAGNationAddress","DAGNInterface","Interface","contract","useStyles","theme","heroTitle","textTransform","panel","backgroundColor","borderRadius","nodeMeterTitleCont","display","nodeMeterCont","position","height","nodeMeterBK","width","border","borderRight","borderColor","borderBottomRightRadius","borderTopRightRadius","nodeMeterProg","top","left","nodeMeterTickCont","nodeMeterTick","doublePanelCont","paddingTop","doublePanel","panelDetail","lineBreak","claimButton","panelCont","marginTop","RewardsComponent","classes","account","isConnected","undefined","state","send","transactionName","status","writeClaimBUSD","getRewardsAmount","value","error","method","args","console","message","toString","rewardsAmount","Math","trunc","getStakedAmount","stakedAmount","stakedPercentage","getWaitingAmount","waitingAmount","paddingRight","marginRight","paddingLeft","AdminComponent","getAdminStatus","isAdmin","Component","props","meterWidth","Object","assign","wid","investBNBamount","setInvestBNBamount","writeInvestBNB","parseEther","getDAGamount","meterPerc","stakedDAGamount","meterBar","createRef","startAdornment","event","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\n\nimport clsx from 'clsx';\n\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\n\nimport { useEthers, AvalancheTestnet, useCall, useContractFunction } from \"@usedapp/core\"\nimport { utils } from 'ethers'\nimport DAGNationABI from \"../DAGNationABI.json\"\nimport { Contract } from '@ethersproject/contracts'\nimport { useState } from \"react\"\n\n\n//setup smart contract interface\nconst DAGNationAddress = '0x3efbCBfCE9E96b83C1c7f496e55D3792db5B0123'\nconst DAGNInterface = new utils.Interface(DAGNationABI)\nconst contract = new Contract(DAGNationAddress, DAGNInterface)\n\nconst useStyles = makeStyles((theme) => ({\n  heroTitle:{\n    textTransform: 'uppercase',\n  },\n  panel:{\n    backgroundColor: 'rgb(0,0,0,70%)',\n    borderRadius:'16px'\n  },\n    \n    \n  nodeMeterTitleCont:{\n    display:'inline',\n  },\n  nodeMeterCont:{\n    display:'block',\n \tposition:'relative',  \n      height:'100px',\n  },\n  nodeMeterBK:{\n    position:'absolute',\n    width:'100%',\n    height:'60px',\n    backgroundColor:'#111',\n    border:'2px solid',\n    borderRight:'0',\n    borderColor:'white',\n    borderRadius:'8px',\n    borderBottomRightRadius:'0',\n    borderTopRightRadius:'0',\n  },\n  nodeMeterProg:{\n    position:'absolute',\n    backgroundColor:'#1bb3be',\n    \n    height:'56px',\n    top:'2px',\n    left:'2px',\n    borderRadius:'6px',\n    borderBottomRightRadius:'0',\n    borderTopRightRadius:'0',\n  },\n    \n  nodeMeterTickCont:{\n    position:'absolute',\n    left:'50%',\n    top: '70px',\n  },\n  nodeMeterTick:{\n    position:'absolute',\n    width:'2px',\n    height:'20px',\n    backgroundColor:'white',\n      top:'-20px',\n        left:'0px'\n  },\n    doublePanelCont:{\n      height: '340px',\n      paddingTop: '20px'\n    },\n    doublePanel:{\n        width:'50%',\n        display:'inline-block',\n        height:'100%'\n    },\n    panelDetail:{\n      backgroundColor:  'rgb(0,0,0,70%)',\n      borderRadius:'16px',\n      height: '100%',\n      width: '100%',\n      display:'inline-block',\n    },\n    lineBreak:{\n      height:'2px',\n      width:'100%',\n      backgroundColor:'white'\n    },\n    claimButton:{\n      display:'block',\n      \n    },\n    panelCont:{\n    height: '300px',\n      marginTop:'40px',\n    },\n      panel:{\n      backgroundColor:  'rgb(0,0,0,70%)',\n      borderRadius:'16px',\n      height: '100%',\n     \n    },\n    lineBreak:{\n    height:'2px',\n    width:'100%',\n    backgroundColor:'white'\n    },\n}\n));\n\n\n\n\n\n\nconst RewardsComponent = () => {\n    \n    const classes = useStyles();\n    \n    const { account } = useEthers()\n    const isConnected = account !== undefined\n    \n    //send claim write to contract\n    const { state, send } = useContractFunction(contract, 'claimBusd', { transactionName: 'Claim' })\n    const { status } = state\n    const writeClaimBUSD = () => {\n        send()\n    }\n    \n    //grab wallet rewards amount\n    function getRewardsAmount() {\n       const { value, error } =\n           useCall(\n               {\n                   contract: contract, // instance of called contract\n                   method: 'getHolderBusdAmount', // Method to be called\n                   args: [account], // Method arguments - address to be checked\n               }\n           ) ?? {};\n       if (error) {\n           console.error(error.message)\n           return undefined\n       }\n       return value?.[0].toString()\n    }\n    const rewardsAmount = Math.trunc( getRewardsAmount()  / 1000000000000000000 )\n                           \n    //grab wallet staked amount\n    function getStakedAmount() {\n      const { value, error } =\n          useCall(\n              {\n                  contract: contract, // instance of called contract\n                  method: 'getHolderAmountInPool', // Method to be called\n                  args: [account], // Method arguments - address to be checked\n              }\n          ) ?? {};\n      if (error) {\n          console.error(error.message)\n          return undefined\n      }\n      return value?.[0].toString()\n    }\n    const stakedAmount = getStakedAmount()\n    const stakedPercentage = 0\n                                     \n                                     \n    //grab wallet waiting amount\n    function getWaitingAmount() {\n    const { value, error } =\n       useCall(\n           {\n               contract: contract, // instance of called contract\n               method: 'getHolderWaitingAmount', // Method to be called\n               args: [account], // Method arguments - address to be checked\n           }\n       ) ?? {};\n    if (error) {\n       console.error(error.message)\n       return undefined\n    }\n    return value?.[0].toString()\n    }\n    const waitingAmount = getWaitingAmount()\n    \n    return (\n        <Container maxWidth=\"md\" mt={4} className={classes.doublePanelCont}>\n            <Box className={classes.doublePanel} style={{paddingRight:'10px'}}>\n                <Box className={classes.panelDetail} p={6}>\n                <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">My $DAG</Typography>\n                <Box className={classes.lineBreak}></Box>\n                <Box mt={2}>\n                    <Box style={{display:'inline-block', marginRight:\"5px\"}}><Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">{waitingAmount}</Typography></Box>\n                    <Box style={{display:'inline-block'}}>\n                        <Box><Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">DAG Queued</Typography></Box>\n                        <Box><Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">for next epoch</Typography></Box>\n                    </Box>\n                </Box>\n                <Box mt={1}>\n                    <Box style={{display:'inline-block', marginRight:\"5px\"}}><Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">{stakedAmount}</Typography></Box>\n                    <Box style={{display:'inline-block'}}>\n                        <Box><Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">DAG Staked</Typography></Box>\n                        <Box><Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">on node</Typography></Box>\n                    </Box>\n                </Box>\n                </Box>\n            </Box>\n            <Box className={classes.doublePanel} style={{paddingLeft:'10px'}}>\n                <Box className={classes.panelDetail} p={6}>\n                    <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">My Rewards</Typography>\n                    <Box className={classes.lineBreak}></Box>\n                    <Box mt={2}>\n                        <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">{rewardsAmount}</Typography>\n                      <Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">$BUSD</Typography>\n                    </Box>\n                    <Box mt={1}>\n                        <Box style={{display:'inline-block'}}><Button className={classes.claimButton} variant=\"contained\" size=\"large\" onClick={() => writeClaimBUSD()}>Claim</Button></Box>\n                        \n                    </Box>\n                </Box>\n            </Box>\n            \n        \n        </Container>\n    )\n}\n\n\n\n\n\n\nconst AdminComponent = () => {\n    \n    const classes = useStyles();\n    \n    const { account } = useEthers()\n    const isConnected = account !== undefined\n    \n    //see if wallet is admin\n    function getAdminStatus() {\n       const { value, error } =\n           useCall(\n               {\n                   contract: contract, // instance of called contract\n                   method: 'checkAdmin', // Method to be called\n                   args: [account], // Method arguments - address to be checked\n               }\n           ) ?? {};\n       if (error) {\n           console.error(error.message)\n           return false\n       }\n       return value?.[0].toString()\n    }\n    const isAdmin = getAdminStatus()\n\n    return (\n            <div>\n                {isAdmin ?\n                <Container maxWidth=\"md\" mt={4} className={classes.panelCont}>\n                <Box className={classes.panel} p={6}>\n                  <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">Admin</Typography>\n                  <Box className={classes.lineBreak}></Box>\n                </Box>\n                </Container>\n                : <div></div> }\n            </div>\n    )\n}\n\n\n\n\n\n\nexport default function Component(props) {\n  const classes = useStyles();\n    \n    const meterWidth = Object.assign({wid:'0%'});\n    \n    const { account } = useEthers()\n    const isConnected = account !== undefined\n    \n    \n    \n    //send invest write to contract\n    const { state, send} = useContractFunction(contract, 'invest', { transactionName: 'Invest' })\n    const { status } = state\n    const [investBNBamount, setInvestBNBamount] = useState('')\n    const writeInvestBNB = () => {\n        send({ value: utils.parseEther(investBNBamount) })\n    }\n    \n    \n    \n    //functions to grab data from contract and update interface\n    function getDAGamount() {\n        const { value, error } =\n            useCall(\n                {\n                    contract: contract, // instance of called contract\n                    method: 'getTotalDag', // Method to be called\n                    args: [], // Method arguments - address to be checked for power\n                }\n            ) ?? {};\n        if (error) {\n            console.error(error.message)\n            return undefined\n        }\n        //update dag meter\n    \n        const meterPerc = (value / 250000)\n        Object.assign(meterWidth, {wid:meterPerc*50+'%'} )\n        return value?.[0].toString()\n    }\n    const stakedDAGamount = getDAGamount()\n    const meterBar = React.createRef()\n                           \n    \n                           \n                           \n  return (\n<section>\n  <Container maxWidth=\"md\" >\n          <Box px={6} pt={8} pb={6} textAlign=\"left\">\n      <Typography className={classes.heroTitle} variant=\"h3\" component=\"h2\" gutterBottom={true}>Accessible softnode ownership</Typography>\n      <Typography variant=\"body\" color=\"primary\">DAGNation provides the opportunity to benefit from the rewrds of node ownership on the Constellation Network. Nodes require 250k $DAG to be staked in them to earn rewards. With DAGNation, you can stake as little at .25 $BNB to participate.</Typography>\n    </Box>\n  </Container>\n  <Container maxWidth=\"md\" mt={4}>\n    <Box className={classes.panel} p={6}>\n\n      <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">{stakedDAGamount}</Typography>\n      <Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"primary\">$DAG Staked</Typography>\n      <box component=\"div\" className={classes.nodeMeterCont}>\n        <box className={classes.nodeMeterBK}></box>\n          <box className={classes.nodeMeterProg} style={{width: meterWidth.wid}}></box>\n\n        <box component=\"div\" className={classes.nodeMeterTickCont}>\n          <box component=\"div\" className={classes.nodeMeterTick}></box>\n          <typography>250k $DAG</typography>\n          <typography>(node minimum)</typography>\n        </box>\n      </box>\n\n          <Box mt={4}><Typography variant=\"h3\" component=\"h2\">Buy $DAG and Stake</Typography></Box>\n          <Box my={2}>\n          <TextField style={{marginRight:\"20px\", top:\"2px\"}} size=\"small\" id=\"outlined-basic\"\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$BNB</InputAdornment>,\n        }}\n          placeholder=\".25 Min\" variant=\"outlined\" onChange={event => setInvestBNBamount(event.target.value)} />\n          \n          \n          <Button variant=\"contained\" size=\"large\" onClick={() => writeInvestBNB()}>Buy and Stake</Button>\n          \n          </Box>\n      <Typography display='block' variant=\"body\" color=\"primary\">Your $BNB is swapped for $DAG and put into a queue to wait until the next Softnode epoch starts, where it will be staked in a Constellation Network Softnode. If at least 250,000 $DAG is staked before the epoch starts, produced rewards will be split among stakers per their percentage of the node.</Typography>\n    </Box>\n  </Container>\n    \n    <RewardsComponent />\n    <AdminComponent />\n    \n</section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}