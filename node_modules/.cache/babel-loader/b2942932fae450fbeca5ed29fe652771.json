{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../providers/config/context';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  if (expirationPeriod === 0) {\n    return [];\n  }\n\n  var timeFromCreation = function timeFromCreation(creationTime) {\n    return Date.now() - creationTime;\n  };\n\n  return notifications.filter(function (notification) {\n    return timeFromCreation(notification.submittedAt) >= expirationPeriod;\n  });\n}\n/**\n * @public\n */\n\n\nexport function useNotifications() {\n  var _useEthers = useEthers(),\n      chainId = _useEthers.chainId,\n      account = _useEthers.account;\n\n  var _useNotificationsCont = useNotificationsContext(),\n      addNotification = _useNotificationsCont.addNotification,\n      notifications = _useNotificationsCont.notifications,\n      removeNotification = _useNotificationsCont.removeNotification;\n\n  var _useConfig = useConfig(),\n      _useConfig$notificati = _useConfig.notifications,\n      checkInterval = _useConfig$notificati.checkInterval,\n      expirationPeriod = _useConfig$notificati.expirationPeriod;\n\n  var chainNotifications = useMemo(function () {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(function () {\n    if (!chainId) {\n      return;\n    }\n\n    var expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    var _iterator = _createForOfIteratorHelper(expiredNotification),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var notification = _step.value;\n        removeNotification({\n          notificationId: notification.id,\n          chainId: chainId\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification: addNotification,\n    removeNotification: removeNotification\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAAuBC,uBAAvB,QAAsD,cAAtD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,SAASC,uBAAT,CAAiCC,aAAjC,EAAgEC,gBAAhE,EAAwF;AACtF,MAAIA,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AACD,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,YAAD;AAAA,WAA0BC,IAAI,CAACC,GAAL,KAAaF,YAAvC;AAAA,GAAzB;;AAEA,SAAOH,aAAa,CAACM,MAAd,CAAqB,UAACC,YAAD;AAAA,WAAkBL,gBAAgB,CAACK,YAAY,CAACC,WAAd,CAAhB,IAA8CP,gBAAhE;AAAA,GAArB,CAAP;AACD;AAED;;;;;AAGA,OAAM,SAAUQ,gBAAV,GAA0B;AAC9B,mBAA6Bb,SAAS,EAAtC;AAAA,MAAQc,OAAR,cAAQA,OAAR;AAAA,MAAiBC,OAAjB,cAAiBA,OAAjB;;AACA,8BAA+DhB,uBAAuB,EAAtF;AAAA,MAAQiB,eAAR,yBAAQA,eAAR;AAAA,MAAyBZ,aAAzB,yBAAyBA,aAAzB;AAAA,MAAwCa,kBAAxC,yBAAwCA,kBAAxC;;AACA,mBAEIf,SAAS,EAFb;AAAA,yCACEE,aADF;AAAA,MACmBc,aADnB,yBACmBA,aADnB;AAAA,MACkCb,gBADlC,yBACkCA,gBADlC;;AAIA,MAAMc,kBAAkB,GAAGrB,OAAO,CAAC,YAAK;;;AACtC,QAAIgB,OAAO,KAAKM,SAAZ,IAAyB,CAACL,OAA9B,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAO,mBAAa,CAACD,OAAD,CAAb,MAAsB,IAAtB,IAAsBO,aAAtB,GAAsBA,EAAtB,GAA0B,EAAjC;AACD,GALiC,EAK/B,CAACjB,aAAD,EAAgBU,OAAhB,EAAyBC,OAAzB,CAL+B,CAAlC;AAOAd,aAAW,CAAC,YAAK;AACf,QAAI,CAACa,OAAL,EAAc;AACZ;AACD;;AAED,QAAMQ,mBAAmB,GAAGnB,uBAAuB,CAACgB,kBAAD,EAAqBd,gBAArB,CAAnD;;AALe,+CAMYiB,mBANZ;AAAA;;AAAA;AAMf,0DAAgD;AAAA,YAArCX,YAAqC;AAC9CM,0BAAkB,CAAC;AAAEM,wBAAc,EAAEZ,YAAY,CAACa,EAA/B;AAAmCV,iBAAO,EAAPA;AAAnC,SAAD,CAAlB;AACD;AARc;AAAA;AAAA;AAAA;AAAA;AAShB,GATU,EASRI,aATQ,CAAX;AAWA,SAAO;AACLd,iBAAa,EAAEe,kBADV;AAELH,mBAAe,EAAfA,eAFK;AAGLC,sBAAkB,EAAlBA;AAHK,GAAP;AAKD","names":["useMemo","useNotificationsContext","useEthers","useInterval","useConfig","getExpiredNotifications","notifications","expirationPeriod","timeFromCreation","creationTime","Date","now","filter","notification","submittedAt","useNotifications","chainId","account","addNotification","removeNotification","checkInterval","chainNotifications","undefined","_a","expiredNotification","notificationId","id"],"sources":["../../../../src/hooks/useNotifications.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}