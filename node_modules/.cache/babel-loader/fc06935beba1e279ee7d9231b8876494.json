{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { BlockNumberProvider } from './blockNumber/blockNumber';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider, ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\n/**\n * Provides basic services for a DApp.\n * @public\n */\n\nexport function DAppProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\n\nvar getMulticallAddresses = function getMulticallAddresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    return result[network.chainId] = network.multicallAddress;\n  });\n  return result;\n};\n\nvar getMulticall2Addresses = function getMulticall2Addresses(networks) {\n  var result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(function (network) {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  var children = _ref2.children;\n\n  var _useConfig = useConfig(),\n      multicallAddresses = _useConfig.multicallAddresses,\n      networks = _useConfig.networks,\n      multicallVersion = _useConfig.multicallVersion;\n\n  var defaultAddresses = useMemo(function () {\n    return multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks);\n  }, [networks, multicallVersion]);\n  var multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(ReadonlyNetworksProvider, {\n    children: _jsx(NetworkProvider, {\n      children: _jsx(BlockNumberProvider, {\n        children: _jsx(BlockNumbersProvider, {\n          children: _jsx(LocalMulticallProvider, {\n            children: _jsx(MultiChainStateProvider, Object.assign({\n              multicallAddresses: multicallAddressesMerged\n            }, {\n              children: _jsx(NotificationsProvider, {\n                children: _jsx(TransactionProvider, {\n                  children: children\n                })\n              })\n            }))\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAoBA,OAApB,QAAmC,OAAnC;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,EAA0BC,wBAA1B,QAA0D,WAA1D;AACA,SAASC,oBAAT,QAAqC,4BAArC;AAUA;;;;;AAIA,OAAM,SAAUC,YAAV,OAA8D;AAAA,MAArCC,MAAqC,QAArCA,MAAqC;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAClE,SACEC,KAACb,cAAD,EAAec;AAACH,UAAM,EAAEA;AAAT,KAAe;AAAAC,cAC5BC,KAACE,sBAAD,EAAuB;AAAAH,gBAAEA;AAAF,KAAvB;AAD4B,GAAf,CAAf,CADF;AAKD;;AAMD,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,QAAD,EAAkC;AAC9D,MAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAkB,UAACC,OAAD;AAAA,WAAcF,MAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACE,gBAAhD;AAAA,GAAlB;AACA,SAAOJ,MAAP;AACD,CAJD;;AAMA,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACN,QAAD,EAAkC;AAC/D,MAAMC,MAAM,GAAgC,EAA5C;AACAD,UAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEE,OAAV,CAAkB,UAACC,OAAD,EAAY;AAC5B,QAAIA,OAAO,CAACI,iBAAZ,EAA+B;AAC7BN,YAAM,CAACE,OAAO,CAACC,OAAT,CAAN,GAA0BD,OAAO,CAACI,iBAAlC;AACD;AACF,GAJD;AAKA,SAAON,MAAP;AACD,CARD;;AAUA,SAASH,sBAAT,QAA6D;AAAA,MAA3BH,QAA2B,SAA3BA,QAA2B;;AAC3D,mBAA2DT,SAAS,EAApE;AAAA,MAAQsB,kBAAR,cAAQA,kBAAR;AAAA,MAA4BR,QAA5B,cAA4BA,QAA5B;AAAA,MAAsCS,gBAAtC,cAAsCA,gBAAtC;;AACA,MAAMC,gBAAgB,GAAG5B,OAAO,CAC9B;AAAA,WAAO2B,gBAAgB,KAAK,CAArB,GAAyBV,qBAAqB,CAACC,QAAD,CAA9C,GAA2DM,sBAAsB,CAACN,QAAD,CAAxF;AAAA,GAD8B,EAE9B,CAACA,QAAD,EAAWS,gBAAX,CAF8B,CAAhC;AAIA,MAAME,wBAAwB,mCAAQD,gBAAR,GAA6BF,kBAA7B,CAA9B;AAEA,SACEZ,KAACL,wBAAD,EAAyB;AAAAI,cACvBC,KAACN,eAAD,EAAgB;AAAAK,gBACdC,KAACZ,mBAAD,EAAoB;AAAAW,kBAClBC,KAACJ,oBAAD,EAAqB;AAAAG,oBACnBC,KAACP,sBAAD,EAAuB;AAAAM,sBACrBC,KAACX,uBAAD,EAAwBY;AAACW,gCAAkB,EAAEG;AAArB,eAA6C;AAAAhB,wBACnEC,KAACT,qBAAD,EAAsB;AAAAQ,0BACpBC,KAACR,mBAAD,EAAoB;AAAAO,4BAAEA;AAAF,iBAApB;AADoB,eAAtB;AADmE,aAA7C,CAAxB;AADqB,WAAvB;AADmB,SAArB;AADkB,OAApB;AADc,KAAhB;AADuB,GAAzB,CADF;AAiBD","names":["useMemo","ConfigProvider","BlockNumberProvider","MultiChainStateProvider","useConfig","NotificationsProvider","TransactionProvider","LocalMulticallProvider","NetworkProvider","ReadonlyNetworksProvider","BlockNumbersProvider","DAppProvider","config","children","_jsx","Object","DAppProviderWithConfig","getMulticallAddresses","networks","result","forEach","network","chainId","multicallAddress","getMulticall2Addresses","multicall2Address","multicallAddresses","multicallVersion","defaultAddresses","multicallAddressesMerged"],"sources":["../../../../src/providers/DAppProvider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}