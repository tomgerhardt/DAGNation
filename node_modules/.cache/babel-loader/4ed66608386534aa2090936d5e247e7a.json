{"ast":null,"code":"var _jsxFileName = \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/src/components-custom/CallToActionCustom2.js\",\n    _s3 = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\nimport clsx from 'clsx';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport { useEthers, AvalancheTestnet, useCall, useContractFunction } from \"@usedapp/core\";\nimport { utils } from 'ethers';\nimport DAGNationABI from \"../DAGNationABI.json\";\nimport { Contract } from '@ethersproject/contracts';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  heroTitle: {\n    textTransform: 'uppercase'\n  },\n  panel: {\n    backgroundColor: 'black',\n    opacity: '70%',\n    borderRadius: '16px'\n  },\n  nodeMeterTitleCont: {\n    display: 'inline'\n  },\n  nodeMeterCont: {\n    display: 'block',\n    position: 'relative',\n    height: '100px'\n  },\n  nodeMeterBK: {\n    position: 'absolute',\n    width: '100%',\n    height: '60px',\n    backgroundColor: '#111',\n    border: '2px solid',\n    borderRight: '0',\n    borderColor: 'white',\n    borderRadius: '8px',\n    borderBottomRightRadius: '0',\n    borderTopRightRadius: '0'\n  },\n  nodeMeterProg: {\n    position: 'absolute',\n    backgroundColor: 'red',\n    height: '56px',\n    top: '2px',\n    left: '2px',\n    borderRadius: '6px',\n    borderBottomRightRadius: '0',\n    borderTopRightRadius: '0'\n  },\n  nodeMeterTickCont: {\n    position: 'absolute',\n    left: '50%',\n    top: '70px'\n  },\n  nodeMeterTick: {\n    position: 'absolute',\n    width: '2px',\n    height: '20px',\n    backgroundColor: 'white',\n    top: '-20px',\n    left: '0px'\n  }\n}));\nexport default function Component(props) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const classes = useStyles();\n  const meterWidth = Object.assign({\n    wid: '50%'\n  }); //setup smart contract interface\n\n  const DAGNationAddress = '0x9CB20fc884d58d8602f99209f451CefED3348cD2';\n  const DAGNInterface = new utils.Interface(DAGNationABI);\n  const contract = new Contract(DAGNationAddress, DAGNInterface);\n  const {\n    state,\n    send\n  } = useContractFunction(contract, 'invest', {\n    transactionName: 'Invest'\n  });\n  const {\n    status\n  } = state;\n  const [investBNBamount, setInvestBNBamount] = useState('');\n\n  const writeInvestBNB = () => {\n    send({\n      value: utils.parseEther(investBNBamount)\n    });\n  }; //functions to grab data from contract and update interface\n\n\n  function getDAGamount() {\n    _s();\n\n    var _useCall;\n\n    const {\n      value,\n      error\n    } = (_useCall = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getTotalDag',\n      // Method to be called\n      args: [] // Method arguments - address to be checked for power\n\n    })) !== null && _useCall !== void 0 ? _useCall : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    } //update dag meter\n\n\n    const meterPerc = value / 250000;\n    Object.assign(meterWidth, {\n      wid: meterPerc * 50 + '%'\n    });\n    return value === null || value === void 0 ? void 0 : value[0].toString();\n  }\n\n  _s(getDAGamount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  const stakedDAGamount = getDAGamount();\n  const meterBar = /*#__PURE__*/React.createRef(); //grab wallet staked amount\n\n  function getStakedAmount() {\n    _s2();\n\n    var _useCall2;\n\n    const {\n      staked,\n      error\n    } = (_useCall2 = useCall({\n      contract: contract,\n      // instance of called contract\n      method: 'getTotalDag',\n      // Method to be called\n      args: [] // Method arguments - address to be checked for power\n\n    })) !== null && _useCall2 !== void 0 ? _useCall2 : {};\n\n    if (error) {\n      console.error(error.message);\n      return undefined;\n    }\n\n    return staked === null || staked === void 0 ? void 0 : staked[0].toString();\n  }\n\n  _s2(getStakedAmount, \"O1/dri1quJgQ3w+3QCAa7O9sZ2w=\", false, function () {\n    return [useCall];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        py: 8,\n        textAlign: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.heroTitle,\n          variant: \"h3\",\n          component: \"h2\",\n          gutterBottom: true,\n          children: \"Accessible softnode ownership\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body\",\n          color: \"secondary\",\n          children: \"DAGNation provides the opportunity to benefit from the rewrds of node ownership on the Constellation Network. Nodes require 250k $DAG to be staked in them to earn rewards. With DADNation, you can stake as little at .25BNB to participate.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      mt: 4,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.panel,\n        p: 6,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"h3\",\n          component: \"h2\",\n          children: stakedDAGamount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.nodeMeterTitleCont,\n          variant: \"body\",\n          color: \"secondary\",\n          children: \"$DAG Staked\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n          component: \"div\",\n          className: classes.nodeMeterCont,\n          children: [/*#__PURE__*/_jsxDEV(\"box\", {\n            className: classes.nodeMeterBK\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n            className: classes.nodeMeterProg,\n            style: {\n              width: meterWidth.wid\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"box\", {\n            component: \"div\",\n            className: classes.nodeMeterTickCont,\n            children: [/*#__PURE__*/_jsxDEV(\"box\", {\n              component: \"div\",\n              className: classes.nodeMeterTick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"typography\", {\n              children: \"250k $DAG\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"typography\", {\n              children: \"(node minimum)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          component: \"h2\",\n          children: \"+ Add to Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: \"$BNB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 27\n            }, this)\n          },\n          placeholder: \".25 Min\",\n          variant: \"outlined\",\n          onChange: event => setInvestBNBamount(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          size: \"large\",\n          onClick: () => writeInvestBNB(),\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          display: \"block\",\n          variant: \"body\",\n          color: \"secondary\",\n          children: \"Staked $BNB is swapped for $DAG and locked into a Constellation Network Softnode. Staked value will not be availible for withdrawl until Constellation Network Mainnet launches in Q3 2022, and at the end of the Softnode Period. If at least 250,000 $DAG is staked before the locking period, produced rewards will be split amoung stakers per their percentage of the node.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 1\n  }, this);\n}\n\n_s3(Component, \"Ea3SWd4b6IQe7mbkF6hTYTK1c+8=\", false, function () {\n  return [useStyles, useContractFunction];\n});\n\n_c = Component;\n\nvar _c;\n\n$RefreshReg$(_c, \"Component\");","map":{"version":3,"sources":["/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/src/components-custom/CallToActionCustom2.js"],"names":["React","makeStyles","emphasize","fade","darken","lighten","clsx","Container","Box","Typography","TextField","InputAdornment","Button","useEthers","AvalancheTestnet","useCall","useContractFunction","utils","DAGNationABI","Contract","useState","useStyles","theme","heroTitle","textTransform","panel","backgroundColor","opacity","borderRadius","nodeMeterTitleCont","display","nodeMeterCont","position","height","nodeMeterBK","width","border","borderRight","borderColor","borderBottomRightRadius","borderTopRightRadius","nodeMeterProg","top","left","nodeMeterTickCont","nodeMeterTick","Component","props","classes","meterWidth","Object","assign","wid","DAGNationAddress","DAGNInterface","Interface","contract","state","send","transactionName","status","investBNBamount","setInvestBNBamount","writeInvestBNB","value","parseEther","getDAGamount","error","method","args","console","message","undefined","meterPerc","toString","stakedDAGamount","meterBar","createRef","getStakedAmount","staked","startAdornment","event","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { emphasize, fade, darken, lighten } from '@material-ui/core/styles/colorManipulator';\n\nimport clsx from 'clsx';\n\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\n\nimport { useEthers, AvalancheTestnet, useCall, useContractFunction } from \"@usedapp/core\"\nimport { utils } from 'ethers'\nimport DAGNationABI from \"../DAGNationABI.json\"\nimport { Contract } from '@ethersproject/contracts'\nimport { useState } from \"react\"\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  heroTitle:{\n    textTransform: 'uppercase',\n  },\n  panel:{\n    backgroundColor:  'black',\n    opacity:'70%',\n    borderRadius:'16px'\n  },\n    \n    \n  nodeMeterTitleCont:{\n    display:'inline',\n  },\n  nodeMeterCont:{\n    display:'block',\n \tposition:'relative',  \n      height:'100px',\n  },\n  nodeMeterBK:{\n    position:'absolute',\n    width:'100%',\n    height:'60px',\n    backgroundColor:'#111',\n    border:'2px solid',\n    borderRight:'0',\n    borderColor:'white',\n    borderRadius:'8px',\n    borderBottomRightRadius:'0',\n    borderTopRightRadius:'0',\n  },\n  nodeMeterProg:{\n    position:'absolute',\n    backgroundColor:'red',\n    \n    height:'56px',\n    top:'2px',\n    left:'2px',\n    borderRadius:'6px',\n    borderBottomRightRadius:'0',\n    borderTopRightRadius:'0',\n  },\n    \n  nodeMeterTickCont:{\n    position:'absolute',\n    left:'50%',\n    top: '70px',\n  },\n  nodeMeterTick:{\n    position:'absolute',\n    width:'2px',\n    height:'20px',\n    backgroundColor:'white',\n      top:'-20px',\n        left:'0px'\n  }, \n}\n));\n\nexport default function Component(props) {\n  const classes = useStyles();\n    \n    const meterWidth = Object.assign({wid:'50%'});\n    \n    //setup smart contract interface\n    const DAGNationAddress = '0x9CB20fc884d58d8602f99209f451CefED3348cD2'\n    const DAGNInterface = new utils.Interface(DAGNationABI)\n    const contract = new Contract(DAGNationAddress, DAGNInterface)\n    \n    const { state, send } = useContractFunction(contract, 'invest', { transactionName: 'Invest' })\n    const { status } = state\n    const [investBNBamount, setInvestBNBamount] = useState('')\n    \n    const writeInvestBNB = () => {\n        send({ value: utils.parseEther(investBNBamount) })\n    }\n    \n    //functions to grab data from contract and update interface\n    function getDAGamount() {\n        const { value, error } =\n            useCall(\n                {\n                    contract: contract, // instance of called contract\n                    method: 'getTotalDag', // Method to be called\n                    args: [], // Method arguments - address to be checked for power\n                }\n            ) ?? {};\n        if (error) {\n            console.error(error.message)\n            return undefined\n        }\n        //update dag meter\n    \n        const meterPerc = (value / 250000)\n        Object.assign(meterWidth, {wid:meterPerc*50+'%'} )\n        return value?.[0].toString()\n    }\n    const stakedDAGamount = getDAGamount()\n    const meterBar = React.createRef()\n                           \n    //grab wallet staked amount\n    function getStakedAmount() {\n       const { staked, error } =\n           useCall(\n               {\n                   contract: contract, // instance of called contract\n                   method: 'getTotalDag', // Method to be called\n                   args: [], // Method arguments - address to be checked for power\n               }\n           ) ?? {};\n       if (error) {\n           console.error(error.message)\n           return undefined\n       }\n       return staked?.[0].toString()\n    }\n    \n    \n  return (\n<section>\n  <Container maxWidth=\"md\" >\n    <Box py={8} textAlign=\"left\">\n      <Typography className={classes.heroTitle} variant=\"h3\" component=\"h2\" gutterBottom={true}>Accessible softnode ownership</Typography>\n      <Typography variant=\"body\" color=\"secondary\">DAGNation provides the opportunity to benefit from the rewrds of node ownership on the Constellation Network. Nodes require 250k $DAG to be staked in them to earn rewards. With DADNation, you can stake as little at .25BNB to participate.</Typography>\n    </Box>\n  </Container>\n  <Container maxWidth=\"md\" mt={4}>\n    <Box className={classes.panel} p={6}>\n\n      <Typography className={classes.nodeMeterTitleCont} variant=\"h3\" component=\"h2\">{stakedDAGamount}</Typography>\n      <Typography className={classes.nodeMeterTitleCont} variant=\"body\" color=\"secondary\">$DAG Staked</Typography>\n      <box component=\"div\" className={classes.nodeMeterCont}>\n        <box className={classes.nodeMeterBK}></box>\n          <box className={classes.nodeMeterProg} style={{width: meterWidth.wid}}></box>\n\n        <box component=\"div\" className={classes.nodeMeterTickCont}>\n          <box component=\"div\" className={classes.nodeMeterTick}></box>\n          <typography>250k $DAG</typography>\n          <typography>(node minimum)</typography>\n        </box>\n      </box>\n\n      <Typography variant=\"h3\" component=\"h2\">+ Add to Node</Typography>\n      <TextField id=\"outlined-basic\" \n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">$BNB</InputAdornment>,\n        }}\n          placeholder=\".25 Min\" variant=\"outlined\" onChange={event => setInvestBNBamount(event.target.value)} />\n          \n          \n          <Button variant=\"contained\" size=\"large\" onClick={() => writeInvestBNB()}>Add</Button>\n          <p>Status: {status}</p>\n          \n      <Typography display='block' variant=\"body\" color=\"secondary\">Staked $BNB is swapped for $DAG and locked into a Constellation Network Softnode. Staked value will not be availible for withdrawl until Constellation Network Mainnet launches in Q3 2022, and at the end of the Softnode Period. If at least 250,000 $DAG is staked before the locking period, produced rewards will be split amoung stakers per their percentage of the node.</Typography>\n    </Box>\n  </Container>\n</section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}