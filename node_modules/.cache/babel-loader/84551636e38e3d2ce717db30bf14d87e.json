{"ast":null,"code":"import _asyncToGenerator from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/regenerator/index.js\";\nimport { useBlockNumber } from '../providers/blockNumber/blockNumber/context';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { useReadonlyNetworks } from '../providers/network/readonlyNetworks';\nimport { useBlockNumbers } from '../providers/blockNumber/blockNumbers';\n/**\n * @public\n */\n\nexport function useGasPrice() {\n  var queryParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _useEthers = useEthers(),\n      library = _useEthers.library;\n\n  var providers = useReadonlyNetworks();\n\n  var _blockNumber = useBlockNumber();\n\n  var blockNumbers = useBlockNumbers();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      gasPrice = _useState2[0],\n      setGasPrice = _useState2[1];\n\n  var chainId = queryParams.chainId;\n\n  var _useMemo = useMemo(function () {\n    return chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber];\n  }, [providers, library, blockNumbers, _blockNumber]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      provider = _useMemo2[0],\n      blockNumber = _useMemo2[1];\n\n  function updateGasPrice() {\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  function _updateGasPrice() {\n    _updateGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setGasPrice;\n              _context.next = 3;\n              return provider === null || provider === void 0 ? void 0 : provider.getGasPrice();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _updateGasPrice.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    updateGasPrice();\n  }, [provider, blockNumber]);\n  return gasPrice;\n}","map":{"version":3,"mappings":";;;AAAA,SAASA,cAAT,QAA+B,8CAA/B;AAEA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,eAAT,QAAgC,uCAAhC;AAGA;;;;AAGA,OAAM,SAAUC,WAAV,GAAmD;AAAA,MAA7BC,WAA6B,uEAAF,EAAE;;AACvD,mBAAoBJ,SAAS,EAA7B;AAAA,MAAQK,OAAR,cAAQA,OAAR;;AACA,MAAMC,SAAS,GAAGL,mBAAmB,EAArC;;AACA,MAAMM,YAAY,GAAGX,cAAc,EAAnC;;AACA,MAAMY,YAAY,GAAGN,eAAe,EAApC;;AAEA,kBAAgCH,QAAQ,EAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAQC,OAAR,GAAoBP,WAApB,CAAQO,OAAR;;AAEA,iBAAgCb,OAAO,CACrC;AAAA,WAAOa,OAAO,GAAG,CAACL,SAAS,CAACK,OAAD,CAAV,EAAqBH,YAAY,CAACG,OAAD,CAAjC,CAAH,GAAiD,CAACN,OAAD,EAAUE,YAAV,CAA/D;AAAA,GADqC,EAErC,CAACD,SAAD,EAAYD,OAAZ,EAAqBG,YAArB,EAAmCD,YAAnC,CAFqC,CAAvC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AAVuD,WAexCC,cAfwC;AAAA;AAAA;;AAAA;AAAA,+EAevD;AAAA;AAAA;AAAA;AAAA;AAAA,4BACEJ,WADF;AAAA;AAAA,qBACoBE,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEG,WAAV,EADpB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfuD;AAAA;AAAA;;AAmBvDlB,WAAS,CAAC,YAAK;AACbiB,kBAAc;AACf,GAFQ,EAEN,CAACF,QAAD,EAAWC,WAAX,CAFM,CAAT;AAIA,SAAOJ,QAAP;AACD","names":["useBlockNumber","useEffect","useMemo","useState","useEthers","useReadonlyNetworks","useBlockNumbers","useGasPrice","queryParams","library","providers","_blockNumber","blockNumbers","gasPrice","setGasPrice","chainId","provider","blockNumber","updateGasPrice","getGasPrice"],"sources":["../../../../src/hooks/useGasPrice.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}