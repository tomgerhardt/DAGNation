{"ast":null,"code":"import _slicedToArray from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/tomgerhardt/Dropbox/TOM/Web3 Consulting/Node Nation/DAG Nation/shuffle 042622/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Contract } from '@ethersproject/contracts';\nvar ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\n/**\n * @public\n */\n\nexport function multicall(_x, _x2, _x3, _x4) {\n  return _multicall.apply(this, arguments);\n}\n\nfunction _multicall() {\n  _multicall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider, address, blockNumber, requests) {\n    var _a, contract, _yield$contract$aggre, _yield$contract$aggre2, results, state, i, _requests$i, _address, data, result, stateForAddress;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(requests.length === 0)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 2:\n            contract = new Contract(address, ABI, provider);\n            _context.next = 5;\n            return contract.aggregate(requests.map(function (_ref) {\n              var address = _ref.address,\n                  data = _ref.data;\n              return [address, data];\n            }), {\n              blockTag: blockNumber\n            });\n\n          case 5:\n            _yield$contract$aggre = _context.sent;\n            _yield$contract$aggre2 = _slicedToArray(_yield$contract$aggre, 2);\n            results = _yield$contract$aggre2[1];\n            state = {};\n\n            for (i = 0; i < requests.length; i++) {\n              _requests$i = requests[i], _address = _requests$i.address, data = _requests$i.data;\n              result = results[i];\n              stateForAddress = (_a = state[_address]) !== null && _a !== void 0 ? _a : {};\n              stateForAddress[data] = {\n                value: result,\n                success: true\n              };\n              state[_address] = stateForAddress;\n            }\n\n            return _context.abrupt(\"return\", state);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _multicall.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;AACA,SAASA,QAAT,QAAyB,0BAAzB;AAKA,IAAMC,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA;;;;AAGA,gBAAsBC,SAAtB;AAAA;AAAA;;;wEAAO,iBACLC,QADK,EAELC,OAFK,EAGLC,WAHK,EAILC,QAJK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMDA,QAAQ,CAACC,MAAT,KAAoB,CANnB;AAAA;AAAA;AAAA;;AAAA,6CAOI,EAPJ;;AAAA;AASCC,oBATD,GASY,IAAIR,QAAJ,CAAaI,OAAb,EAAsBH,GAAtB,EAA2BE,QAA3B,CATZ;AAAA;AAAA,mBAU4CK,QAAQ,CAACC,SAAT,CAC/CH,QAAQ,CAACI,GAAT,CAAa;AAAA,kBAAGN,OAAH,QAAGA,OAAH;AAAA,kBAAYO,IAAZ,QAAYA,IAAZ;AAAA,qBAAuB,CAACP,OAAD,EAAUO,IAAV,CAAvB;AAAA,aAAb,CAD+C,EAE/C;AAAEC,sBAAQ,EAAEP;AAAZ,aAF+C,CAV5C;;AAAA;AAAA;AAAA;AAUIQ,mBAVJ;AAcCC,iBAdD,GAcqB,EAdrB;;AAeL,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACC,MAA7B,EAAqCQ,CAAC,EAAtC,EAA0C;AAAA,4BACdT,QAAQ,CAACS,CAAD,CADM,EAChCX,QADgC,eAChCA,OADgC,EACvBO,IADuB,eACvBA,IADuB;AAElCK,oBAFkC,GAEzBH,OAAO,CAACE,CAAD,CAFkB;AAGlCE,6BAHkC,GAGhB,WAAK,CAACb,QAAD,CAAL,MAAc,IAAd,IAAcc,aAAd,GAAcA,EAAd,GAAkB,EAHF;AAIxCD,6BAAe,CAACN,IAAD,CAAf,GAAwB;AAAEQ,qBAAK,EAAEH,MAAT;AAAiBI,uBAAO,EAAE;AAA1B,eAAxB;AACAN,mBAAK,CAACV,QAAD,CAAL,GAAiBa,eAAjB;AACD;;AArBI,6CAsBEH,KAtBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","names":["Contract","ABI","multicall","provider","address","blockNumber","requests","length","contract","aggregate","map","data","blockTag","results","state","i","result","stateForAddress","_a","value","success"],"sources":["../../../../../../src/providers/chainState/common/multicall.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}