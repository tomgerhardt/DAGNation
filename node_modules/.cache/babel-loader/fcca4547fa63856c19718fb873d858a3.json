{"ast":null,"code":"import { utils } from 'ethers';\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function warnOnInvalidCall(call) {\n  if (!call) {\n    return;\n  }\n\n  const {\n    contract,\n    method,\n    args\n  } = call;\n  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`);\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function encodeCallData(call, chainId) {\n  if (!call) {\n    return undefined;\n  }\n\n  const {\n    contract,\n    method,\n    args\n  } = call;\n\n  if (!contract.address || !method) {\n    warnOnInvalidCall(call);\n    return undefined;\n  }\n\n  try {\n    return {\n      address: contract.address,\n      data: contract.interface.encodeFunctionData(method, args),\n      chainId\n    };\n  } catch (_a) {\n    warnOnInvalidCall(call);\n    return undefined;\n  }\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function getUniqueCalls(requests) {\n  const unique = [];\n  const used = {};\n\n  for (const request of requests) {\n    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {\n      unique.push(request);\n      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true;\n    }\n  }\n\n  return unique;\n}\n/**\n * @internal Intended for internal use - use it on your own risk\n */\n\nexport function decodeCallResult(call, result) {\n  if (!result || !call) {\n    return undefined;\n  }\n\n  const {\n    value,\n    success\n  } = result;\n\n  try {\n    if (success) {\n      return {\n        value: call.contract.interface.decodeFunctionResult(call.method, value),\n        error: undefined\n      };\n    } else {\n      const errorMessage = new utils.Interface(['function Error(string)']).decodeFunctionData('Error', value)[0];\n      return {\n        value: undefined,\n        error: new Error(errorMessage)\n      };\n    }\n  } catch (error) {\n    return {\n      value: undefined,\n      error: error\n    };\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AAKA;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BC,IAA5B,EAA8C;AAClD,MAAI,CAACA,IAAL,EAAW;AACT;AACD;;AACD,QAAM;AAAEC,YAAF;AAAYC,UAAZ;AAAoBC;AAApB,MAA6BH,IAAnC;AACAI,SAAO,CAACC,IAAR,CAAa,kCAAkCJ,QAAQ,CAACK,OAAO,WAAWJ,MAAM,SAASC,IAAI,EAA7F;AACD;AAED;;;;AAGA,OAAM,SAAUI,cAAV,CAAyBP,IAAzB,EAA6CQ,OAA7C,EAA4D;AAChE,MAAI,CAACR,IAAL,EAAW;AACT,WAAOS,SAAP;AACD;;AACD,QAAM;AAAER,YAAF;AAAYC,UAAZ;AAAoBC;AAApB,MAA6BH,IAAnC;;AACA,MAAI,CAACC,QAAQ,CAACK,OAAV,IAAqB,CAACJ,MAA1B,EAAkC;AAChCH,qBAAiB,CAACC,IAAD,CAAjB;AACA,WAAOS,SAAP;AACD;;AACD,MAAI;AACF,WAAO;AAAEH,aAAO,EAAEL,QAAQ,CAACK,OAApB;AAA6BI,UAAI,EAAET,QAAQ,CAACU,SAAT,CAAmBC,kBAAnB,CAAsCV,MAAtC,EAA8CC,IAA9C,CAAnC;AAAwFK;AAAxF,KAAP;AACD,GAFD,CAEE,WAAM;AACNT,qBAAiB,CAACC,IAAD,CAAjB;AACA,WAAOS,SAAP;AACD;AACF;AAED;;;;AAGA,OAAM,SAAUI,cAAV,CAAyBC,QAAzB,EAA4C;AAChD,QAAMC,MAAM,GAAc,EAA1B;AACA,QAAMC,IAAI,GAA4B,EAAtC;;AACA,OAAK,MAAMC,OAAX,IAAsBH,QAAtB,EAAgC;AAC9B,QAAI,CAACE,IAAI,CAAC,GAAGC,OAAO,CAACX,OAAR,CAAgBY,WAAhB,EAA6B,GAAGD,OAAO,CAACP,IAAI,GAAGO,OAAO,CAACT,OAAO,EAAlE,CAAT,EAAgF;AAC9EO,YAAM,CAACI,IAAP,CAAYF,OAAZ;AACAD,UAAI,CAAC,GAAGC,OAAO,CAACX,OAAR,CAAgBY,WAAhB,EAA6B,GAAGD,OAAO,CAACP,IAAI,GAAGO,OAAO,CAACT,OAAO,EAAlE,CAAJ,GAA4E,IAA5E;AACD;AACF;;AACD,SAAOO,MAAP;AACD;AAUD;;;;AAGA,OAAM,SAAUK,gBAAV,CACJpB,IADI,EAEJqB,MAFI,EAEiB;AAErB,MAAI,CAACA,MAAD,IAAW,CAACrB,IAAhB,EAAsB;AACpB,WAAOS,SAAP;AACD;;AACD,QAAM;AAAEa,SAAF;AAASC;AAAT,MAAqBF,MAA3B;;AACA,MAAI;AACF,QAAIE,OAAJ,EAAa;AACX,aAAO;AACLD,aAAK,EAAEtB,IAAI,CAACC,QAAL,CAAcU,SAAd,CAAwBa,oBAAxB,CAA6CxB,IAAI,CAACE,MAAlD,EAA0DoB,KAA1D,CADF;AAILG,aAAK,EAAEhB;AAJF,OAAP;AAMD,KAPD,MAOO;AACL,YAAMiB,YAAY,GAAW,IAAI5B,KAAK,CAAC6B,SAAV,CAAoB,CAAC,wBAAD,CAApB,EAAgDC,kBAAhD,CAAmE,OAAnE,EAA4EN,KAA5E,EAAmF,CAAnF,CAA7B;AACA,aAAO;AACLA,aAAK,EAAEb,SADF;AAELgB,aAAK,EAAE,IAAII,KAAJ,CAAUH,YAAV;AAFF,OAAP;AAID;AACF,GAfD,CAeE,OAAOD,KAAP,EAAc;AACd,WAAO;AACLH,WAAK,EAAEb,SADF;AAELgB,WAAK,EAAEA;AAFF,KAAP;AAID;AACF","names":["utils","warnOnInvalidCall","call","contract","method","args","console","warn","address","encodeCallData","chainId","undefined","data","interface","encodeFunctionData","getUniqueCalls","requests","unique","used","request","toLowerCase","push","decodeCallResult","result","value","success","decodeFunctionResult","error","errorMessage","Interface","decodeFunctionData","Error"],"sources":["../../../../src/helpers/calls.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}